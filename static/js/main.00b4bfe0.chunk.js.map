{"version":3,"sources":["components/Header.js","components/Card.js","components/Gameboard.js","App.js","index.js"],"names":["Header","props","currentScore","bestScore","gameOver","className","Card","handleClick","img","src","alt","onClick","width","height","Gameboard","resetCurrentScoreAndTallyBestScore","increaseCurrentScore","showGameOver","hideGameOver","useState","countryImages","setCountryImages","random20CountriesImages","setRandom20CountriesImages","clickedCards","setClickedCards","randomlySelect20CardsForNewRound","_","sampleSize","e","clickedCard","currentTarget","firstElementChild","includes","newClickedCards","push","shuffle","useEffect","a","fetch","response","json","codes","justCountriesNotStates","Object","entries","filter","country","countryCode","length","startsWith","countryImageArr","map","countryName","url","Image","cacheFlags","cardList","countryImg","App","setCurrentScore","setBestScore","setGameOver","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00b4bfe0.chunk.js","sourcesContent":["export default function Header(props) {\n    const { currentScore, bestScore, gameOver } = props;\n    return (\n        <div className='header'>\n            <div className='instructions'>\n                <h1>Flag Memory Game</h1>\n                <p>Get points by clicking on any flag that you haven't yet clicked on! \n                Your score resets if you forget and click a flag a second time! </p>\n            </div> \n            <div className='scoreboard-and-status'>\n                <div className='scoreboard'>\n                    <div>{`Score: ${currentScore}`}</div>\n                    <div>{`Best Score: ${bestScore}`}</div>\n                </div>  \n                {gameOver ?\n                    <div className='status'>GAME OVER! CLICK ON A CARD TO START A NEW ROUND!</div>\n                    : null}\n            </div>   \n           \n        </div>\n    );\n}","export default function Card(props) {\n        const { handleClick } = props;\n        const {src, alt} = props.img;\n        return (\n            <div className='card' onClick={handleClick}>\n                <img src={src} alt={alt} width='224' height='168' />\n                <h2>{alt}</h2>\n            </div>\n        );\n}","import { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport Card from './Card';\n\n\nexport default function Gameboard(props) {\n\n  const { resetCurrentScoreAndTallyBestScore, increaseCurrentScore,\n        showGameOver, hideGameOver } = props;\n  const [countryImages, setCountryImages] = useState([]);\n  const [random20CountriesImages, setRandom20CountriesImages] = useState([]);\n  const [clickedCards, setClickedCards] = useState([]);\n\n  function randomlySelect20CardsForNewRound() {\n    setRandom20CountriesImages(_.sampleSize(countryImages, 20));\n  }\n\n  function shuffleCards() {\n      setRandom20CountriesImages(_.shuffle(random20CountriesImages));\n  }\n\n  function handleClick(e) {\n    const clickedCard = e.currentTarget.firstElementChild.alt;\n    if (clickedCards.includes(clickedCard)) {\n        resetCurrentScoreAndTallyBestScore();\n        setClickedCards([]);\n        randomlySelect20CardsForNewRound();\n        showGameOver();\n    } else {\n        increaseCurrentScore();\n        const newClickedCards = [...clickedCards];\n        newClickedCards.push(clickedCard);\n        setClickedCards(newClickedCards);\n        shuffleCards();\n        hideGameOver();\n    }\n    \n  }\n\n  useEffect(() => randomlySelect20CardsForNewRound(), [countryImages]);\n\n  useEffect(()=> {\n    cacheFlags();\n\n    async function cacheFlags() {\n      const response = await fetch('https://flagcdn.com/en/codes.json');\n      const codes = await response.json();\n      const justCountriesNotStates = Object.entries(codes).filter(country => {\n        const [countryCode] = country;\n        return countryCode.length === 2 || (countryCode.startsWith('gb') && \n        countryCode.length === 6) ? true : false;\n      });\n      const countryImageArr = justCountriesNotStates.map(country => {\n        const [countryCode, countryName] = country;\n        const url = `https://flagcdn.com/224x168/${countryCode}.png`;\n        const img = new Image();\n        img.src = url;\n        img.alt = countryName;\n        return img;\n      });\n      setCountryImages(countryImageArr);\n    }\n\n  }, []);\n\n  let cardList = random20CountriesImages.map(countryImg => {\n    return <Card key={countryImg.alt} img={countryImg} handleClick={handleClick} />\n    });\n\n    return (\n        <div className='gameboard'>\n            {random20CountriesImages.length > 0 ?\n            cardList\n            : 'Loading'}\n        </div>\n    );    \n}","import Header from './components/Header';\nimport Gameboard from './components/Gameboard';\nimport './style.css';\nimport { useState } from 'react';\n\n\n//randomize order with every click on a tiles\n//also run that function when the component mounts\n\n\nfunction App() {\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  function resetCurrentScoreAndTallyBestScore() {\n    if (currentScore > bestScore) {\n      setBestScore(currentScore);\n    } \n    setCurrentScore(0);\n  }\n\n  function increaseCurrentScore() {\n    setCurrentScore(currentScore + 1);\n  }\n\n  function showGameOver() {\n    setGameOver(true);\n  }\n\n  function hideGameOver() {\n    setGameOver(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n      currentScore={currentScore}\n      bestScore={bestScore}\n      gameOver={gameOver}\n      />\n      <Gameboard\n      resetCurrentScoreAndTallyBestScore={resetCurrentScoreAndTallyBestScore}\n      increaseCurrentScore={increaseCurrentScore}\n      showGameOver={showGameOver}\n      hideGameOver={hideGameOver}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}